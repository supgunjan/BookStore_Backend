"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const handlebars_1 = __importDefault(require("handlebars"));
const lodash_1 = require("lodash");
const path_1 = require("path");
const read_pkg_up_1 = require("read-pkg-up");
const defaultOptions = {
    title: 'Swagger UI',
    oauthOptions: false,
    swaggerOptions: {
        dom_id: '#swagger-ui',
        url: 'https://petstore.swagger.io/v2/swagger.json',
        layout: 'StandaloneLayout',
    },
    routePrefix: '/docs',
    specPrefix: '/docs/spec',
    swaggerVersion: '',
    exposeSpec: false,
    hideTopbar: false,
    favicon: '/favicon.png',
};
function koaSwagger(config = {}) {
    if (config.swaggerVersion === undefined) {
        const pkg = read_pkg_up_1.sync({ cwd: __dirname });
        if (pkg === undefined) {
            throw new Error('Package not found');
        }
        defaultOptions.swaggerVersion = pkg.packageJson.devDependencies['swagger-ui-dist'];
    }
    // Setup icons
    const extFavicon = config.favicon;
    const faviconPath = path_1.join(__dirname, defaultOptions.favicon);
    // Setup default options
    const options = lodash_1.defaultsDeep(config, defaultOptions);
    handlebars_1.default.registerHelper('json', context => JSON.stringify(context));
    handlebars_1.default.registerHelper('strfnc', (fnc) => fnc);
    handlebars_1.default.registerHelper('isset', function (conditional, opt) {
        return conditional ? opt.fn(this) : opt.inverse(this);
    });
    const index = handlebars_1.default.compile(fs_1.readFileSync(path_1.join(__dirname, './index.hbs'), 'utf-8'));
    // eslint-disable-next-line func-names
    return function koaSwaggerUi(ctx, next) {
        if (options.exposeSpec && ctx.path === options.specPrefix) {
            ctx.body = options.swaggerOptions.spec;
            return true;
        }
        if (options.routePrefix === false || ctx.path === options.routePrefix) {
            ctx.type = 'text/html';
            ctx.body = index(options);
            return true;
        }
        if (extFavicon === undefined && ctx.path === defaultOptions.favicon) {
            ctx.type = 'image/png';
            ctx.body = fs_1.createReadStream(faviconPath);
            return true;
        }
        return next();
    };
}
exports.default = koaSwagger;
module.exports = koaSwagger;
//# sourceMappingURL=index.js.map